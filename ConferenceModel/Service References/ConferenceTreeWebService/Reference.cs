//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
namespace ConferenceModel.ConferenceTreeWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConferenceTreeWebService.ConferenceTreeWebServiceSoap")]
    public interface ConferenceTreeWebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity GetAll(int conferenceID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetAll", ReplyAction="*")]
        System.IAsyncResult BeginGetAll(int conferenceID, System.AsyncCallback callback, object asyncState);
        
        ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity EndGetAll(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateOne", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UpdateOne", ReplyAction="*")]
        System.IAsyncResult BeginUpdateOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateOne(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateTittle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateTittle(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UpdateTittle", ReplyAction="*")]
        System.IAsyncResult BeginUpdateTittle(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTittle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateComment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateComment(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UpdateComment", ReplyAction="*")]
        System.IAsyncResult BeginUpdateComment(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LinkAdd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LinkAdd(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/LinkAdd", ReplyAction="*")]
        System.IAsyncResult BeginLinkAdd(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState);
        
        void EndLinkAdd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Instead", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void Instead(int conferenceID, int beforeItemGuid, int nowItemGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Instead", ReplyAction="*")]
        System.IAsyncResult BeginInstead(int conferenceID, int beforeItemGuid, int nowItemGuid, System.AsyncCallback callback, object asyncState);
        
        void EndInstead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ForceOccuptFocus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ForceOccuptFocus(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ForceOccuptFocus", ReplyAction="*")]
        System.IAsyncResult BeginForceOccuptFocus(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState);
        
        void EndForceOccuptFocus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VoteChanged", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void VoteChanged(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/VoteChanged", ReplyAction="*")]
        System.IAsyncResult BeginVoteChanged(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant, System.AsyncCallback callback, object asyncState);
        
        void EndVoteChanged(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ClearItemAllVote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ClearItemAllVote(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ClearItemAllVote", ReplyAction="*")]
        System.IAsyncResult BeginClearItemAllVote(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState);
        
        void EndClearItemAllVote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddOne", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/AddOne", ReplyAction="*")]
        System.IAsyncResult BeginAddOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState);
        
        void EndAddOne(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteOne", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DeleteOne", ReplyAction="*")]
        System.IAsyncResult BeginDeleteOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteOne(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetAll(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity conferenceTreeInitRefleshEntity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/SetAll", ReplyAction="*")]
        System.IAsyncResult BeginSetAll(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity conferenceTreeInitRefleshEntity, System.AsyncCallback callback, object asyncState);
        
        void EndSetAll(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckVoteListContainsSelf", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CheckVoteListContainsSelf(string conferenceName, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CheckVoteListContainsSelf", ReplyAction="*")]
        System.IAsyncResult BeginCheckVoteListContainsSelf(string conferenceName, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckVoteListContainsSelf(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ConferenceTreeInitRefleshEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ConferenceTreeItemTransferEntity[] academicReviewItemTransferEntity_ObserListField;
        
        private int rootCountField;
        
        private ConferenceTreeItemTransferEntity rootParent_AcademicReviewItemTransferEntityField;
        
        private string summarizeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ConferenceTreeItemTransferEntity[] AcademicReviewItemTransferEntity_ObserList {
            get {
                return this.academicReviewItemTransferEntity_ObserListField;
            }
            set {
                this.academicReviewItemTransferEntity_ObserListField = value;
                this.RaisePropertyChanged("AcademicReviewItemTransferEntity_ObserList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int RootCount {
            get {
                return this.rootCountField;
            }
            set {
                this.rootCountField = value;
                this.RaisePropertyChanged("RootCount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ConferenceTreeItemTransferEntity RootParent_AcademicReviewItemTransferEntity {
            get {
                return this.rootParent_AcademicReviewItemTransferEntityField;
            }
            set {
                this.rootParent_AcademicReviewItemTransferEntityField = value;
                this.RaisePropertyChanged("RootParent_AcademicReviewItemTransferEntity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Summarize {
            get {
                return this.summarizeField;
            }
            set {
                this.summarizeField = value;
                this.RaisePropertyChanged("Summarize");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ConferenceTreeItemTransferEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string titleField;
        
        private int guidField;
        
        private string commentField;

        private List<string> linkListField;
        
        private int parentGuidField;
        
        private ConferenceTreeOperationType operationField;
        
        private string operationerField;

        private List<string> participantListField;
        
        private string focusAuthorField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
                this.RaisePropertyChanged("Title");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
                this.RaisePropertyChanged("Guid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
                this.RaisePropertyChanged("Comment");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public List<string> LinkList
        {  
            get {
                return this.linkListField;
            }
            set {
                this.linkListField = value;
                this.RaisePropertyChanged("LinkList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int ParentGuid {
            get {
                return this.parentGuidField;
            }
            set {
                this.parentGuidField = value;
                this.RaisePropertyChanged("ParentGuid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ConferenceTreeOperationType Operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
                this.RaisePropertyChanged("Operation");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Operationer {
            get {
                return this.operationerField;
            }
            set {
                this.operationerField = value;
                this.RaisePropertyChanged("Operationer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        public List<string> ParticipantList
        {
            get {
                return this.participantListField;
            }
            set {
                this.participantListField = value;
                this.RaisePropertyChanged("ParticipantList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string FocusAuthor {
            get {
                return this.focusAuthorField;
            }
            set {
                this.focusAuthorField = value;
                this.RaisePropertyChanged("FocusAuthor");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ConferenceTreeOperationType {
        
        /// <remarks/>
        AddType,
        
        /// <remarks/>
        DeleteType,
        
        /// <remarks/>
        UpdateType,
        
        /// <remarks/>
        RefleshAllType,
        
        /// <remarks/>
        FocusType1,
        
        /// <remarks/>
        FocusType2,
        
        /// <remarks/>
        UpdateTittle,
        
        /// <remarks/>
        UpdateComment,
        
        /// <remarks/>
        LinkAdd,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ConferenceTreeWebServiceSoapChannel : ConferenceModel.ConferenceTreeWebService.ConferenceTreeWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckVoteListContainsSelfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckVoteListContainsSelfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConferenceTreeWebServiceSoapClient : System.ServiceModel.ClientBase<ConferenceModel.ConferenceTreeWebService.ConferenceTreeWebServiceSoap>, ConferenceModel.ConferenceTreeWebService.ConferenceTreeWebServiceSoap {
        
        private BeginOperationDelegate onBeginGetAllDelegate;
        
        private EndOperationDelegate onEndGetAllDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateOneDelegate;
        
        private EndOperationDelegate onEndUpdateOneDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateOneCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTittleDelegate;
        
        private EndOperationDelegate onEndUpdateTittleDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTittleCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCommentDelegate;
        
        private EndOperationDelegate onEndUpdateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginLinkAddDelegate;
        
        private EndOperationDelegate onEndLinkAddDelegate;
        
        private System.Threading.SendOrPostCallback onLinkAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsteadDelegate;
        
        private EndOperationDelegate onEndInsteadDelegate;
        
        private System.Threading.SendOrPostCallback onInsteadCompletedDelegate;
        
        private BeginOperationDelegate onBeginForceOccuptFocusDelegate;
        
        private EndOperationDelegate onEndForceOccuptFocusDelegate;
        
        private System.Threading.SendOrPostCallback onForceOccuptFocusCompletedDelegate;
        
        private BeginOperationDelegate onBeginVoteChangedDelegate;
        
        private EndOperationDelegate onEndVoteChangedDelegate;
        
        private System.Threading.SendOrPostCallback onVoteChangedCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearItemAllVoteDelegate;
        
        private EndOperationDelegate onEndClearItemAllVoteDelegate;
        
        private System.Threading.SendOrPostCallback onClearItemAllVoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOneDelegate;
        
        private EndOperationDelegate onEndAddOneDelegate;
        
        private System.Threading.SendOrPostCallback onAddOneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteOneDelegate;
        
        private EndOperationDelegate onEndDeleteOneDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteOneCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetAllDelegate;
        
        private EndOperationDelegate onEndSetAllDelegate;
        
        private System.Threading.SendOrPostCallback onSetAllCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckVoteListContainsSelfDelegate;
        
        private EndOperationDelegate onEndCheckVoteListContainsSelfDelegate;
        
        private System.Threading.SendOrPostCallback onCheckVoteListContainsSelfCompletedDelegate;
        
        public ConferenceTreeWebServiceSoapClient() {
        }
        
        public ConferenceTreeWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConferenceTreeWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceTreeWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceTreeWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetAllCompletedEventArgs> GetAllCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateOneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTittleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCommentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LinkAddCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsteadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ForceOccuptFocusCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> VoteChangedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClearItemAllVoteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddOneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteOneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetAllCompleted;
        
        public event System.EventHandler<CheckVoteListContainsSelfCompletedEventArgs> CheckVoteListContainsSelfCompleted;
        
        public ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity GetAll(int conferenceID) {
            return base.Channel.GetAll(conferenceID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAll(int conferenceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAll(conferenceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity EndGetAll(System.IAsyncResult result) {
            return base.Channel.EndGetAll(result);
        }
        
        private System.IAsyncResult OnBeginGetAll(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            return this.BeginGetAll(conferenceID, callback, asyncState);
        }
        
        private object[] OnEndGetAll(System.IAsyncResult result) {
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity retVal = this.EndGetAll(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCompleted(object state) {
            if ((this.GetAllCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCompleted(this, new GetAllCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllAsync(int conferenceID) {
            this.GetAllAsync(conferenceID, null);
        }
        
        public void GetAllAsync(int conferenceID, object userState) {
            if ((this.onBeginGetAllDelegate == null)) {
                this.onBeginGetAllDelegate = new BeginOperationDelegate(this.OnBeginGetAll);
            }
            if ((this.onEndGetAllDelegate == null)) {
                this.onEndGetAllDelegate = new EndOperationDelegate(this.OnEndGetAll);
            }
            if ((this.onGetAllCompletedDelegate == null)) {
                this.onGetAllCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllDelegate, new object[] {
                        conferenceID}, this.onEndGetAllDelegate, this.onGetAllCompletedDelegate, userState);
        }
        
        public void UpdateOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            base.Channel.UpdateOne(conferenceID, academicReviewItemTransferEntity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateOne(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateOne(System.IAsyncResult result) {
            base.Channel.EndUpdateOne(result);
        }
        
        private System.IAsyncResult OnBeginUpdateOne(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity)(inValues[1]));
            return this.BeginUpdateOne(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        private object[] OnEndUpdateOne(System.IAsyncResult result) {
            this.EndUpdateOne(result);
            return null;
        }
        
        private void OnUpdateOneCompleted(object state) {
            if ((this.UpdateOneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateOneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateOneAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            this.UpdateOneAsync(conferenceID, academicReviewItemTransferEntity, null);
        }
        
        public void UpdateOneAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, object userState) {
            if ((this.onBeginUpdateOneDelegate == null)) {
                this.onBeginUpdateOneDelegate = new BeginOperationDelegate(this.OnBeginUpdateOne);
            }
            if ((this.onEndUpdateOneDelegate == null)) {
                this.onEndUpdateOneDelegate = new EndOperationDelegate(this.OnEndUpdateOne);
            }
            if ((this.onUpdateOneCompletedDelegate == null)) {
                this.onUpdateOneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateOneCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateOneDelegate, new object[] {
                        conferenceID,
                        academicReviewItemTransferEntity}, this.onEndUpdateOneDelegate, this.onUpdateOneCompletedDelegate, userState);
        }
        
        public void UpdateTittle(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            base.Channel.UpdateTittle(conferenceID, academicReviewItemTransferEntity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTittle(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTittle(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateTittle(System.IAsyncResult result) {
            base.Channel.EndUpdateTittle(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTittle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity)(inValues[1]));
            return this.BeginUpdateTittle(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        private object[] OnEndUpdateTittle(System.IAsyncResult result) {
            this.EndUpdateTittle(result);
            return null;
        }
        
        private void OnUpdateTittleCompleted(object state) {
            if ((this.UpdateTittleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTittleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTittleAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            this.UpdateTittleAsync(conferenceID, academicReviewItemTransferEntity, null);
        }
        
        public void UpdateTittleAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, object userState) {
            if ((this.onBeginUpdateTittleDelegate == null)) {
                this.onBeginUpdateTittleDelegate = new BeginOperationDelegate(this.OnBeginUpdateTittle);
            }
            if ((this.onEndUpdateTittleDelegate == null)) {
                this.onEndUpdateTittleDelegate = new EndOperationDelegate(this.OnEndUpdateTittle);
            }
            if ((this.onUpdateTittleCompletedDelegate == null)) {
                this.onUpdateTittleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTittleCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTittleDelegate, new object[] {
                        conferenceID,
                        academicReviewItemTransferEntity}, this.onEndUpdateTittleDelegate, this.onUpdateTittleCompletedDelegate, userState);
        }
        
        public void UpdateComment(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            base.Channel.UpdateComment(conferenceID, academicReviewItemTransferEntity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateComment(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateComment(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateComment(System.IAsyncResult result) {
            base.Channel.EndUpdateComment(result);
        }
        
        private System.IAsyncResult OnBeginUpdateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity)(inValues[1]));
            return this.BeginUpdateComment(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        private object[] OnEndUpdateComment(System.IAsyncResult result) {
            this.EndUpdateComment(result);
            return null;
        }
        
        private void OnUpdateCommentCompleted(object state) {
            if ((this.UpdateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCommentAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            this.UpdateCommentAsync(conferenceID, academicReviewItemTransferEntity, null);
        }
        
        public void UpdateCommentAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, object userState) {
            if ((this.onBeginUpdateCommentDelegate == null)) {
                this.onBeginUpdateCommentDelegate = new BeginOperationDelegate(this.OnBeginUpdateComment);
            }
            if ((this.onEndUpdateCommentDelegate == null)) {
                this.onEndUpdateCommentDelegate = new EndOperationDelegate(this.OnEndUpdateComment);
            }
            if ((this.onUpdateCommentCompletedDelegate == null)) {
                this.onUpdateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCommentDelegate, new object[] {
                        conferenceID,
                        academicReviewItemTransferEntity}, this.onEndUpdateCommentDelegate, this.onUpdateCommentCompletedDelegate, userState);
        }
        
        public void LinkAdd(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            base.Channel.LinkAdd(conferenceID, academicReviewItemTransferEntity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLinkAdd(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLinkAdd(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLinkAdd(System.IAsyncResult result) {
            base.Channel.EndLinkAdd(result);
        }
        
        private System.IAsyncResult OnBeginLinkAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity)(inValues[1]));
            return this.BeginLinkAdd(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        private object[] OnEndLinkAdd(System.IAsyncResult result) {
            this.EndLinkAdd(result);
            return null;
        }
        
        private void OnLinkAddCompleted(object state) {
            if ((this.LinkAddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LinkAddCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LinkAddAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            this.LinkAddAsync(conferenceID, academicReviewItemTransferEntity, null);
        }
        
        public void LinkAddAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, object userState) {
            if ((this.onBeginLinkAddDelegate == null)) {
                this.onBeginLinkAddDelegate = new BeginOperationDelegate(this.OnBeginLinkAdd);
            }
            if ((this.onEndLinkAddDelegate == null)) {
                this.onEndLinkAddDelegate = new EndOperationDelegate(this.OnEndLinkAdd);
            }
            if ((this.onLinkAddCompletedDelegate == null)) {
                this.onLinkAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLinkAddCompleted);
            }
            base.InvokeAsync(this.onBeginLinkAddDelegate, new object[] {
                        conferenceID,
                        academicReviewItemTransferEntity}, this.onEndLinkAddDelegate, this.onLinkAddCompletedDelegate, userState);
        }
        
        public void Instead(int conferenceID, int beforeItemGuid, int nowItemGuid) {
            base.Channel.Instead(conferenceID, beforeItemGuid, nowItemGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInstead(int conferenceID, int beforeItemGuid, int nowItemGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInstead(conferenceID, beforeItemGuid, nowItemGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInstead(System.IAsyncResult result) {
            base.Channel.EndInstead(result);
        }
        
        private System.IAsyncResult OnBeginInstead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            int beforeItemGuid = ((int)(inValues[1]));
            int nowItemGuid = ((int)(inValues[2]));
            return this.BeginInstead(conferenceID, beforeItemGuid, nowItemGuid, callback, asyncState);
        }
        
        private object[] OnEndInstead(System.IAsyncResult result) {
            this.EndInstead(result);
            return null;
        }
        
        private void OnInsteadCompleted(object state) {
            if ((this.InsteadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsteadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsteadAsync(int conferenceID, int beforeItemGuid, int nowItemGuid) {
            this.InsteadAsync(conferenceID, beforeItemGuid, nowItemGuid, null);
        }
        
        public void InsteadAsync(int conferenceID, int beforeItemGuid, int nowItemGuid, object userState) {
            if ((this.onBeginInsteadDelegate == null)) {
                this.onBeginInsteadDelegate = new BeginOperationDelegate(this.OnBeginInstead);
            }
            if ((this.onEndInsteadDelegate == null)) {
                this.onEndInsteadDelegate = new EndOperationDelegate(this.OnEndInstead);
            }
            if ((this.onInsteadCompletedDelegate == null)) {
                this.onInsteadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsteadCompleted);
            }
            base.InvokeAsync(this.onBeginInsteadDelegate, new object[] {
                        conferenceID,
                        beforeItemGuid,
                        nowItemGuid}, this.onEndInsteadDelegate, this.onInsteadCompletedDelegate, userState);
        }
        
        public void ForceOccuptFocus(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            base.Channel.ForceOccuptFocus(conferenceID, academicReviewItemTransferEntity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginForceOccuptFocus(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginForceOccuptFocus(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndForceOccuptFocus(System.IAsyncResult result) {
            base.Channel.EndForceOccuptFocus(result);
        }
        
        private System.IAsyncResult OnBeginForceOccuptFocus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity)(inValues[1]));
            return this.BeginForceOccuptFocus(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        private object[] OnEndForceOccuptFocus(System.IAsyncResult result) {
            this.EndForceOccuptFocus(result);
            return null;
        }
        
        private void OnForceOccuptFocusCompleted(object state) {
            if ((this.ForceOccuptFocusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ForceOccuptFocusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ForceOccuptFocusAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            this.ForceOccuptFocusAsync(conferenceID, academicReviewItemTransferEntity, null);
        }
        
        public void ForceOccuptFocusAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, object userState) {
            if ((this.onBeginForceOccuptFocusDelegate == null)) {
                this.onBeginForceOccuptFocusDelegate = new BeginOperationDelegate(this.OnBeginForceOccuptFocus);
            }
            if ((this.onEndForceOccuptFocusDelegate == null)) {
                this.onEndForceOccuptFocusDelegate = new EndOperationDelegate(this.OnEndForceOccuptFocus);
            }
            if ((this.onForceOccuptFocusCompletedDelegate == null)) {
                this.onForceOccuptFocusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnForceOccuptFocusCompleted);
            }
            base.InvokeAsync(this.onBeginForceOccuptFocusDelegate, new object[] {
                        conferenceID,
                        academicReviewItemTransferEntity}, this.onEndForceOccuptFocusDelegate, this.onForceOccuptFocusCompletedDelegate, userState);
        }
        
        public void VoteChanged(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant) {
            base.Channel.VoteChanged(conferenceID, academicReviewItemTransferEntity, Participant);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginVoteChanged(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginVoteChanged(conferenceID, academicReviewItemTransferEntity, Participant, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndVoteChanged(System.IAsyncResult result) {
            base.Channel.EndVoteChanged(result);
        }
        
        private System.IAsyncResult OnBeginVoteChanged(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity)(inValues[1]));
            string Participant = ((string)(inValues[2]));
            return this.BeginVoteChanged(conferenceID, academicReviewItemTransferEntity, Participant, callback, asyncState);
        }
        
        private object[] OnEndVoteChanged(System.IAsyncResult result) {
            this.EndVoteChanged(result);
            return null;
        }
        
        private void OnVoteChangedCompleted(object state) {
            if ((this.VoteChangedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VoteChangedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VoteChangedAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant) {
            this.VoteChangedAsync(conferenceID, academicReviewItemTransferEntity, Participant, null);
        }
        
        public void VoteChangedAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant, object userState) {
            if ((this.onBeginVoteChangedDelegate == null)) {
                this.onBeginVoteChangedDelegate = new BeginOperationDelegate(this.OnBeginVoteChanged);
            }
            if ((this.onEndVoteChangedDelegate == null)) {
                this.onEndVoteChangedDelegate = new EndOperationDelegate(this.OnEndVoteChanged);
            }
            if ((this.onVoteChangedCompletedDelegate == null)) {
                this.onVoteChangedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVoteChangedCompleted);
            }
            base.InvokeAsync(this.onBeginVoteChangedDelegate, new object[] {
                        conferenceID,
                        academicReviewItemTransferEntity,
                        Participant}, this.onEndVoteChangedDelegate, this.onVoteChangedCompletedDelegate, userState);
        }
        
        public void ClearItemAllVote(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            base.Channel.ClearItemAllVote(conferenceID, academicReviewItemTransferEntity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClearItemAllVote(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearItemAllVote(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndClearItemAllVote(System.IAsyncResult result) {
            base.Channel.EndClearItemAllVote(result);
        }
        
        private System.IAsyncResult OnBeginClearItemAllVote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity)(inValues[1]));
            return this.BeginClearItemAllVote(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        private object[] OnEndClearItemAllVote(System.IAsyncResult result) {
            this.EndClearItemAllVote(result);
            return null;
        }
        
        private void OnClearItemAllVoteCompleted(object state) {
            if ((this.ClearItemAllVoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearItemAllVoteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearItemAllVoteAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            this.ClearItemAllVoteAsync(conferenceID, academicReviewItemTransferEntity, null);
        }
        
        public void ClearItemAllVoteAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, object userState) {
            if ((this.onBeginClearItemAllVoteDelegate == null)) {
                this.onBeginClearItemAllVoteDelegate = new BeginOperationDelegate(this.OnBeginClearItemAllVote);
            }
            if ((this.onEndClearItemAllVoteDelegate == null)) {
                this.onEndClearItemAllVoteDelegate = new EndOperationDelegate(this.OnEndClearItemAllVote);
            }
            if ((this.onClearItemAllVoteCompletedDelegate == null)) {
                this.onClearItemAllVoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearItemAllVoteCompleted);
            }
            base.InvokeAsync(this.onBeginClearItemAllVoteDelegate, new object[] {
                        conferenceID,
                        academicReviewItemTransferEntity}, this.onEndClearItemAllVoteDelegate, this.onClearItemAllVoteCompletedDelegate, userState);
        }
        
        public void AddOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            base.Channel.AddOne(conferenceID, academicReviewItemTransferEntity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOne(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddOne(System.IAsyncResult result) {
            base.Channel.EndAddOne(result);
        }
        
        private System.IAsyncResult OnBeginAddOne(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity)(inValues[1]));
            return this.BeginAddOne(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        private object[] OnEndAddOne(System.IAsyncResult result) {
            this.EndAddOne(result);
            return null;
        }
        
        private void OnAddOneCompleted(object state) {
            if ((this.AddOneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOneAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            this.AddOneAsync(conferenceID, academicReviewItemTransferEntity, null);
        }
        
        public void AddOneAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, object userState) {
            if ((this.onBeginAddOneDelegate == null)) {
                this.onBeginAddOneDelegate = new BeginOperationDelegate(this.OnBeginAddOne);
            }
            if ((this.onEndAddOneDelegate == null)) {
                this.onEndAddOneDelegate = new EndOperationDelegate(this.OnEndAddOne);
            }
            if ((this.onAddOneCompletedDelegate == null)) {
                this.onAddOneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOneCompleted);
            }
            base.InvokeAsync(this.onBeginAddOneDelegate, new object[] {
                        conferenceID,
                        academicReviewItemTransferEntity}, this.onEndAddOneDelegate, this.onAddOneCompletedDelegate, userState);
        }
        
        public void DeleteOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            base.Channel.DeleteOne(conferenceID, academicReviewItemTransferEntity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteOne(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteOne(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteOne(System.IAsyncResult result) {
            base.Channel.EndDeleteOne(result);
        }
        
        private System.IAsyncResult OnBeginDeleteOne(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity)(inValues[1]));
            return this.BeginDeleteOne(conferenceID, academicReviewItemTransferEntity, callback, asyncState);
        }
        
        private object[] OnEndDeleteOne(System.IAsyncResult result) {
            this.EndDeleteOne(result);
            return null;
        }
        
        private void OnDeleteOneCompleted(object state) {
            if ((this.DeleteOneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteOneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteOneAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity) {
            this.DeleteOneAsync(conferenceID, academicReviewItemTransferEntity, null);
        }
        
        public void DeleteOneAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, object userState) {
            if ((this.onBeginDeleteOneDelegate == null)) {
                this.onBeginDeleteOneDelegate = new BeginOperationDelegate(this.OnBeginDeleteOne);
            }
            if ((this.onEndDeleteOneDelegate == null)) {
                this.onEndDeleteOneDelegate = new EndOperationDelegate(this.OnEndDeleteOne);
            }
            if ((this.onDeleteOneCompletedDelegate == null)) {
                this.onDeleteOneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteOneCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteOneDelegate, new object[] {
                        conferenceID,
                        academicReviewItemTransferEntity}, this.onEndDeleteOneDelegate, this.onDeleteOneCompletedDelegate, userState);
        }
        
        public void SetAll(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity conferenceTreeInitRefleshEntity) {
            base.Channel.SetAll(conferenceID, conferenceTreeInitRefleshEntity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetAll(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity conferenceTreeInitRefleshEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetAll(conferenceID, conferenceTreeInitRefleshEntity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetAll(System.IAsyncResult result) {
            base.Channel.EndSetAll(result);
        }
        
        private System.IAsyncResult OnBeginSetAll(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity conferenceTreeInitRefleshEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity)(inValues[1]));
            return this.BeginSetAll(conferenceID, conferenceTreeInitRefleshEntity, callback, asyncState);
        }
        
        private object[] OnEndSetAll(System.IAsyncResult result) {
            this.EndSetAll(result);
            return null;
        }
        
        private void OnSetAllCompleted(object state) {
            if ((this.SetAllCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetAllCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetAllAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity conferenceTreeInitRefleshEntity) {
            this.SetAllAsync(conferenceID, conferenceTreeInitRefleshEntity, null);
        }
        
        public void SetAllAsync(int conferenceID, ConferenceModel.ConferenceTreeWebService.ConferenceTreeInitRefleshEntity conferenceTreeInitRefleshEntity, object userState) {
            if ((this.onBeginSetAllDelegate == null)) {
                this.onBeginSetAllDelegate = new BeginOperationDelegate(this.OnBeginSetAll);
            }
            if ((this.onEndSetAllDelegate == null)) {
                this.onEndSetAllDelegate = new EndOperationDelegate(this.OnEndSetAll);
            }
            if ((this.onSetAllCompletedDelegate == null)) {
                this.onSetAllCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetAllCompleted);
            }
            base.InvokeAsync(this.onBeginSetAllDelegate, new object[] {
                        conferenceID,
                        conferenceTreeInitRefleshEntity}, this.onEndSetAllDelegate, this.onSetAllCompletedDelegate, userState);
        }
        
        public bool CheckVoteListContainsSelf(string conferenceName, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant) {
            return base.Channel.CheckVoteListContainsSelf(conferenceName, academicReviewItemTransferEntity, Participant);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckVoteListContainsSelf(string conferenceName, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckVoteListContainsSelf(conferenceName, academicReviewItemTransferEntity, Participant, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckVoteListContainsSelf(System.IAsyncResult result) {
            return base.Channel.EndCheckVoteListContainsSelf(result);
        }
        
        private System.IAsyncResult OnBeginCheckVoteListContainsSelf(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity = ((ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity)(inValues[1]));
            string Participant = ((string)(inValues[2]));
            return this.BeginCheckVoteListContainsSelf(conferenceName, academicReviewItemTransferEntity, Participant, callback, asyncState);
        }
        
        private object[] OnEndCheckVoteListContainsSelf(System.IAsyncResult result) {
            bool retVal = this.EndCheckVoteListContainsSelf(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckVoteListContainsSelfCompleted(object state) {
            if ((this.CheckVoteListContainsSelfCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckVoteListContainsSelfCompleted(this, new CheckVoteListContainsSelfCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckVoteListContainsSelfAsync(string conferenceName, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant) {
            this.CheckVoteListContainsSelfAsync(conferenceName, academicReviewItemTransferEntity, Participant, null);
        }
        
        public void CheckVoteListContainsSelfAsync(string conferenceName, ConferenceModel.ConferenceTreeWebService.ConferenceTreeItemTransferEntity academicReviewItemTransferEntity, string Participant, object userState) {
            if ((this.onBeginCheckVoteListContainsSelfDelegate == null)) {
                this.onBeginCheckVoteListContainsSelfDelegate = new BeginOperationDelegate(this.OnBeginCheckVoteListContainsSelf);
            }
            if ((this.onEndCheckVoteListContainsSelfDelegate == null)) {
                this.onEndCheckVoteListContainsSelfDelegate = new EndOperationDelegate(this.OnEndCheckVoteListContainsSelf);
            }
            if ((this.onCheckVoteListContainsSelfCompletedDelegate == null)) {
                this.onCheckVoteListContainsSelfCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckVoteListContainsSelfCompleted);
            }
            base.InvokeAsync(this.onBeginCheckVoteListContainsSelfDelegate, new object[] {
                        conferenceName,
                        academicReviewItemTransferEntity,
                        Participant}, this.onEndCheckVoteListContainsSelfDelegate, this.onCheckVoteListContainsSelfCompletedDelegate, userState);
        }
    }
}
