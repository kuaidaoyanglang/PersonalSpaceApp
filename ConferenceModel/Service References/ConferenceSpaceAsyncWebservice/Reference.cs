//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConferenceModel.ConferenceSpaceAsyncWebservice {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncWebserviceSoap")]
    public interface ConferenceSpaceAsyncWebserviceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FillSyncServiceData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void FillSyncServiceData(int conferenceID, string sharer, string uri, ConferenceModel.ConferenceSpaceAsyncWebservice.FileType fileType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/FillSyncServiceData", ReplyAction="*")]
        System.IAsyncResult BeginFillSyncServiceData(int conferenceID, string sharer, string uri, ConferenceModel.ConferenceSpaceAsyncWebservice.FileType fileType, System.AsyncCallback callback, object asyncState);
        
        void EndFillSyncServiceData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSyncServiceData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ConferenceModel.ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncEntity GetSyncServiceData(int conferenceID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetSyncServiceData", ReplyAction="*")]
        System.IAsyncResult BeginGetSyncServiceData(int conferenceID, System.AsyncCallback callback, object asyncState);
        
        ConferenceModel.ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncEntity EndGetSyncServiceData(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum FileType {
        
        /// <remarks/>
        docx,
        
        /// <remarks/>
        doc,
        
        /// <remarks/>
        xlsx,
        
        /// <remarks/>
        xls,
        
        /// <remarks/>
        pptx,
        
        /// <remarks/>
        ppt,
        
        /// <remarks/>
        one,
        
        /// <remarks/>
        jpg,
        
        /// <remarks/>
        png,
        
        /// <remarks/>
        ico,
        
        /// <remarks/>
        mp4,
        
        /// <remarks/>
        avi,
        
        /// <remarks/>
        mp3,
        
        /// <remarks/>
        xml,
        
        /// <remarks/>
        txt,
        
        /// <remarks/>
        record,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ConferenceSpaceAsyncEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string sharerField;
        
        private FileType fileTypeField;
        
        private string uriField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Sharer {
            get {
                return this.sharerField;
            }
            set {
                this.sharerField = value;
                this.RaisePropertyChanged("Sharer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public FileType FileType {
            get {
                return this.fileTypeField;
            }
            set {
                this.fileTypeField = value;
                this.RaisePropertyChanged("FileType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Uri {
            get {
                return this.uriField;
            }
            set {
                this.uriField = value;
                this.RaisePropertyChanged("Uri");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ConferenceSpaceAsyncWebserviceSoapChannel : ConferenceModel.ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncWebserviceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSyncServiceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSyncServiceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ConferenceModel.ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncEntity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ConferenceModel.ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncEntity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConferenceSpaceAsyncWebserviceSoapClient : System.ServiceModel.ClientBase<ConferenceModel.ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncWebserviceSoap>, ConferenceModel.ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncWebserviceSoap {
        
        private BeginOperationDelegate onBeginFillSyncServiceDataDelegate;
        
        private EndOperationDelegate onEndFillSyncServiceDataDelegate;
        
        private System.Threading.SendOrPostCallback onFillSyncServiceDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSyncServiceDataDelegate;
        
        private EndOperationDelegate onEndGetSyncServiceDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetSyncServiceDataCompletedDelegate;
        
        public ConferenceSpaceAsyncWebserviceSoapClient() {
        }
        
        public ConferenceSpaceAsyncWebserviceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConferenceSpaceAsyncWebserviceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceSpaceAsyncWebserviceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceSpaceAsyncWebserviceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> FillSyncServiceDataCompleted;
        
        public event System.EventHandler<GetSyncServiceDataCompletedEventArgs> GetSyncServiceDataCompleted;
        
        public void FillSyncServiceData(int conferenceID, string sharer, string uri, ConferenceModel.ConferenceSpaceAsyncWebservice.FileType fileType) {
            base.Channel.FillSyncServiceData(conferenceID, sharer, uri, fileType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFillSyncServiceData(int conferenceID, string sharer, string uri, ConferenceModel.ConferenceSpaceAsyncWebservice.FileType fileType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFillSyncServiceData(conferenceID, sharer, uri, fileType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndFillSyncServiceData(System.IAsyncResult result) {
            base.Channel.EndFillSyncServiceData(result);
        }
        
        private System.IAsyncResult OnBeginFillSyncServiceData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            string sharer = ((string)(inValues[1]));
            string uri = ((string)(inValues[2]));
            ConferenceModel.ConferenceSpaceAsyncWebservice.FileType fileType = ((ConferenceModel.ConferenceSpaceAsyncWebservice.FileType)(inValues[3]));
            return this.BeginFillSyncServiceData(conferenceID, sharer, uri, fileType, callback, asyncState);
        }
        
        private object[] OnEndFillSyncServiceData(System.IAsyncResult result) {
            this.EndFillSyncServiceData(result);
            return null;
        }
        
        private void OnFillSyncServiceDataCompleted(object state) {
            if ((this.FillSyncServiceDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FillSyncServiceDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FillSyncServiceDataAsync(int conferenceID, string sharer, string uri, ConferenceModel.ConferenceSpaceAsyncWebservice.FileType fileType) {
            this.FillSyncServiceDataAsync(conferenceID, sharer, uri, fileType, null);
        }
        
        public void FillSyncServiceDataAsync(int conferenceID, string sharer, string uri, ConferenceModel.ConferenceSpaceAsyncWebservice.FileType fileType, object userState) {
            if ((this.onBeginFillSyncServiceDataDelegate == null)) {
                this.onBeginFillSyncServiceDataDelegate = new BeginOperationDelegate(this.OnBeginFillSyncServiceData);
            }
            if ((this.onEndFillSyncServiceDataDelegate == null)) {
                this.onEndFillSyncServiceDataDelegate = new EndOperationDelegate(this.OnEndFillSyncServiceData);
            }
            if ((this.onFillSyncServiceDataCompletedDelegate == null)) {
                this.onFillSyncServiceDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFillSyncServiceDataCompleted);
            }
            base.InvokeAsync(this.onBeginFillSyncServiceDataDelegate, new object[] {
                        conferenceID,
                        sharer,
                        uri,
                        fileType}, this.onEndFillSyncServiceDataDelegate, this.onFillSyncServiceDataCompletedDelegate, userState);
        }
        
        public ConferenceModel.ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncEntity GetSyncServiceData(int conferenceID) {
            return base.Channel.GetSyncServiceData(conferenceID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSyncServiceData(int conferenceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSyncServiceData(conferenceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ConferenceModel.ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncEntity EndGetSyncServiceData(System.IAsyncResult result) {
            return base.Channel.EndGetSyncServiceData(result);
        }
        
        private System.IAsyncResult OnBeginGetSyncServiceData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int conferenceID = ((int)(inValues[0]));
            return this.BeginGetSyncServiceData(conferenceID, callback, asyncState);
        }
        
        private object[] OnEndGetSyncServiceData(System.IAsyncResult result) {
            ConferenceModel.ConferenceSpaceAsyncWebservice.ConferenceSpaceAsyncEntity retVal = this.EndGetSyncServiceData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSyncServiceDataCompleted(object state) {
            if ((this.GetSyncServiceDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSyncServiceDataCompleted(this, new GetSyncServiceDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSyncServiceDataAsync(int conferenceID) {
            this.GetSyncServiceDataAsync(conferenceID, null);
        }
        
        public void GetSyncServiceDataAsync(int conferenceID, object userState) {
            if ((this.onBeginGetSyncServiceDataDelegate == null)) {
                this.onBeginGetSyncServiceDataDelegate = new BeginOperationDelegate(this.OnBeginGetSyncServiceData);
            }
            if ((this.onEndGetSyncServiceDataDelegate == null)) {
                this.onEndGetSyncServiceDataDelegate = new EndOperationDelegate(this.OnEndGetSyncServiceData);
            }
            if ((this.onGetSyncServiceDataCompletedDelegate == null)) {
                this.onGetSyncServiceDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSyncServiceDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetSyncServiceDataDelegate, new object[] {
                        conferenceID}, this.onEndGetSyncServiceDataDelegate, this.onGetSyncServiceDataCompletedDelegate, userState);
        }
    }
}
